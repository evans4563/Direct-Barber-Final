// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Direct_Barber.Models;

public partial class DirectBarber1Context : DbContext
{
    public DirectBarber1Context(DbContextOptions<DirectBarber1Context> options)
        : base(options)
    {
    }

    public virtual DbSet<EstadoSolicitud> EstadoSolicituds { get; set; }

    public virtual DbSet<Resena> Resenas { get; set; }

    public virtual DbSet<Rol> Roles { get; set; }

    public virtual DbSet<Solicitud> Solicituds { get; set; }

    public virtual DbSet<TipoSer> TipoSers { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<EstadoSolicitud>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EstadoSo__3213E83F2C74FF3D");

            entity.ToTable("EstadoSolicitud");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Estado)
                .HasMaxLength(20)
                .HasColumnName("estado");
        });

        modelBuilder.Entity<Resena>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Resenas__3214EC073912758A");

            entity.Property(e => e.Contenido).IsRequired();
            entity.Property(e => e.FechaPublicacion).HasColumnType("datetime");
            entity.Property(e => e.Id_Barbero).HasColumnName("Id_Barbero");
            entity.Property(e => e.Id_Cliente).HasColumnName("Id_Cliente");

            entity.HasOne(d => d.Barbero).WithMany(p => p.ResenasComoBarbero)
                .HasForeignKey(d => d.Id_Barbero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Resenas__Id_Barb__2EDAF651");

            entity.HasOne(d => d.Cliente).WithMany(p => p.ResenasComoCliente)
                .HasForeignKey(d => d.Id_Cliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Resenas__Id_Barb__2DE6D218");
        });

        modelBuilder.Entity<Rol>(entity =>
        {
            entity.HasKey(e => e.Id);  // Definir la clave primaria

            entity.ToTable("Rol");  // Nombre de la tabla en la base de datos

            entity.Property(e => e.Nombre)
                .HasMaxLength(50)    // Longitud máxima del campo Nombre
                .IsRequired();       // Este campo es obligatorio
        });


        modelBuilder.Entity<Solicitud>(entity =>
        {
            entity.HasKey(e => e.IdSolicitud).HasName("PK__Solicitu__1E2B2178985C88EE");

            entity.ToTable("Solicitud");

            entity.Property(e => e.IdSolicitud).HasColumnName("id_Solicitud");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .HasColumnName("descripcion");
            entity.Property(e => e.Dirección).IsRequired();
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.IdBarbero).HasColumnName("id_Barbero");
            entity.Property(e => e.IdCliente).HasColumnName("id_Cliente");
            entity.Property(e => e.IdEstado)
                .HasDefaultValue(1)
                .HasColumnName("id_Estado");
            entity.Property(e => e.PrecioServicio)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("precio_Servicio");
            entity.Property(e => e.TipoServicio).HasColumnName("tipo_Servicio");

            entity.HasOne(d => d.IdBarberoNavigation).WithMany(p => p.SolicitudesComoBarbero)
                .HasForeignKey(d => d.IdBarbero)
                .HasConstraintName("FK__Solicitud__id_Ba__793DFFAF");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.SolicitudesComoCliente)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK__Solicitud__id_Cl__7849DB76");

            entity.HasOne(d => d.IdEstadoNavigation).WithMany(p => p.Solicituds)
                .HasForeignKey(d => d.IdEstado)
                .HasConstraintName("FK__Solicitud__id_Es__7B264821");

            entity.HasOne(d => d.TipoServicioNavigation).WithMany(p => p.Solicituds)
                .HasForeignKey(d => d.TipoServicio)
                .HasConstraintName("FK__Solicitud__tipo___7A3223E8");
        });

        modelBuilder.Entity<TipoSer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoSer__3213E83F404E2532");

            entity.ToTable("TipoSer");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Foto).HasColumnName("foto");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio");
        });

        // Configuración de la entidad Usuario
        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.Id);  // Definir la clave primaria

            entity.ToTable("Usuario");  // Nombre de la tabla en la base de datos

            // Configuración de las propiedades del Usuario
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .HasColumnName("nombre");

            entity.Property(e => e.Apellido)
                .HasMaxLength(50)
                .HasColumnName("apellido");

            entity.Property(e => e.Correo)
                .HasMaxLength(60)
                .IsRequired()    // El correo es obligatorio
                .HasColumnName("correo");

            entity.Property(e => e.Contrasena)
                .HasMaxLength(200)
                .IsRequired()    // La contraseña es obligatoria
                .HasColumnName("contrasena");

            entity.Property(e => e.Direccion)
                .HasMaxLength(50)
                .HasColumnName("direccion");

            entity.Property(e => e.Telefono)
                .HasMaxLength(20)
                .HasColumnName("telefono");

            entity.Property(e => e.FecNacimiento)
                .HasColumnType("date")
                .HasColumnName("fec_nacimiento");

            entity.Property(e => e.FecRegistro)
                .HasDefaultValueSql("(getdate())")  // Valor por defecto
                .HasColumnType("datetime")
                .HasColumnName("fec_registro");

            entity.Property(e => e.Calificacion)
                .HasColumnType("decimal(3, 2)")
                .HasColumnName("calificacion");

            entity.Property(e => e.Foto)
                .HasColumnType("varbinary(max)")
                .HasColumnName("foto");

            entity.Property(e => e.Documento)
                .HasMaxLength(10)
                .HasColumnName("documento");

            // Relación con la tabla Rol
            entity.HasOne(u => u.Rol)                    // Relación de uno a muchos
                .WithMany(r => r.Usuarios)               // Un Rol tiene muchos Usuarios
                .HasForeignKey(u => u.Id_Rol)            // Llave foránea
                .HasConstraintName("FK_Usuario_Rol");    // Nombre de la llave foránea
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}